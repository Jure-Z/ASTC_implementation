const BLOCK_MAX_PARTITIONS: u32 = 4u;
const ERROR_CALC_DEFAULT: f32 = 1e37;
const BLOCK_MAX_TEXELS: u32 = 144u;
const BLOCK_MAX_WEIGHTS: u32 = 64u;

const TUNE_MAX_TRIAL_CANDIDATES = 8u;

//ASTC endpoint formats
const FMT_LUMINANCE = 0u;
const FMT_LUMINANCE_DELTA = 1u;
const FMT_HDR_LUMINANCE_LARGE_RANGE = 2u;
const FMT_HDR_LUMINANCE_SMALL_RANGE = 3u;
const FMT_LUMINANCE_ALPHA = 4u;
const FMT_LUMINANCE_ALPHA_DELTA = 5u;
const FMT_RGB_SCALE = 6u;
const FMT_HDR_RGB_SCALE = 7u;
const FMT_RGB = 8u;
const FMT_RGB_DELTA = 9u;
const FMT_RGB_SCALE_ALPHA = 10u;
const FMT_HDR_RGB = 11u;
const FMT_RGBA = 12u;
const FMT_RGBA_DELTA = 13u;
const FMT_HDR_RGB_LDR_ALPHA = 14u;
const FMT_HDR_RGBA = 15u;


// Flattened table from the original C++ code
// Size is 17 * 512
const COLOR_UNQUANT_TO_QUANT_TABLE = array<i32, 8704>(
    //QUANT_6
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,
	 51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,
	 51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,
	 51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    //QUANT_8
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
	  0,   0,   0,   0,   0,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,
	 36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,
	 36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,
	 73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,
	 73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    //QUANT_10
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  28,  28,  28,
	 28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,
	 28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,
	 56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,
	 56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  56,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,
	 84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,
	 84,  84,  84,  84,  84,  84, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    //QUANT_12
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,  23,  23,  23,  23,  23,  23,  23,
	 23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,
	 23,  23,  23,  23,  23,  23,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,
	 46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,
	 69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,  69,
	 69,  69,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,
	 92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    //QUANT_16
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,
	 17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,
	 34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,
	 51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  51,  68,  68,  68,  68,  68,  68,  68,  68,
	 68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  85,  85,  85,  85,  85,  85,
	 85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    //QUANT_20
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,
	 13,  13,  13,  13,  13,  13,  13,  13,  13,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,
	 27,  27,  27,  27,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  54,
	 54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  67,  67,  67,  67,  67,  67,
	 67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  67,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,
	 80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  94,  94,  94,  94,  94,  94,  94,  94,  94,  94,  94,  94,  94,  94,  94,  94,  94,
	 94,  94,  94,  94,  94,  94,  94,  94,  94,  94, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    //QUANT_24
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,
	 11,  11,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  33,  33,  33,  33,  33,  33,  33,  33,
	 33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,
	 44,  44,  44,  44,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  55,  66,  66,  66,  66,  66,  66,
	 66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,
	 77,  77,  77,  77,  77,  77,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  88,  99,  99,  99,  99,
	 99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    //QUANT_32
      0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  16,  16,  16,  16,  16,  16,  16,
	 16,  16,  16,  16,  16,  16,  16,  16,  16,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  33,  33,  33,  33,  33,  33,
	 33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  49,  49,  49,  49,  49,
	 49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  49,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  57,  66,  66,  66,  66,
	 66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  66,  74,  74,  74,  74,  74,  74,  74,  74,  74,  74,  74,  74,  74,  74,  74,  74,  82,  82,  82,
	 82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  82,  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  90,  99,  99,
	 99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99,  99, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 255, 255, 255, 255, 255, 255, 255, 255, 255,
    //QUANT_40
      0,   0,   0,   0,   0,   0,   0,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,
	 13,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  32,  32,  32,  32,  32,
	 32,  32,  32,  32,  32,  32,  32,  32,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,
	 45,  45,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  65,  65,  65,  65,
	 65,  65,  65,  65,  65,  65,  65,  65,  65,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  71,  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,
	 78,  78,  78,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  84,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  97,  97,  97,
	 97,  97,  97,  97,  97,  97,  97,  97,  97,  97, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 255, 255, 255, 255, 255, 255, 255,
    //QUANT_48
      0,   0,   0,   0,   0,   0,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  16,  16,  16,  16,
	 16,  16,  16,  16,  16,  16,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  32,  32,  32,  32,
	 32,  32,  32,  32,  32,  32,  32,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  48,  48,  48,  48,
	 48,  48,  48,  48,  48,  48,  48,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  54,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  59,  65,  65,  65,
	 65,  65,  65,  65,  65,  65,  65,  65,  70,  70,  70,  70,  70,  70,  70,  70,  70,  70,  70,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  76,  81,  81,
	 81,  81,  81,  81,  81,  81,  81,  81,  86,  86,  86,  86,  86,  86,  86,  86,  86,  86,  86,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  92,  97,  97,
	 97,  97,  97,  97,  97,  97,  97,  97,  97, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 255, 255, 255, 255, 255, 255,
    //QUANT_64
      0,   0,   0,   0,   0,   4,   4,   4,   4,   4,   4,   4,   4,   8,   8,   8,   8,   8,   8,   8,   8,  12,  12,  12,  12,  12,  12,  12,  12,  16,  16,  16,
	 16,  16,  16,  16,  16,  20,  20,  20,  20,  20,  20,  20,  20,  24,  24,  24,  24,  24,  24,  24,  24,  28,  28,  28,  28,  28,  28,  28,  28,  32,  32,  32,
	 32,  32,  32,  32,  32,  36,  36,  36,  36,  36,  36,  36,  36,  40,  40,  40,  40,  40,  40,  40,  40,  44,  44,  44,  44,  44,  44,  44,  44,  48,  48,  48,
	 48,  48,  48,  48,  48,  52,  52,  52,  52,  52,  52,  52,  52,  56,  56,  56,  56,  56,  56,  56,  56,  60,  60,  60,  60,  60,  60,  60,  60,  60,  65,  65,
	 65,  65,  65,  65,  65,  65,  65,  69,  69,  69,  69,  69,  69,  69,  69,  73,  73,  73,  73,  73,  73,  73,  73,  77,  77,  77,  77,  77,  77,  77,  77,  81,
	 81,  81,  81,  81,  81,  81,  81,  85,  85,  85,  85,  85,  85,  85,  85,  89,  89,  89,  89,  89,  89,  89,  89,  93,  93,  93,  93,  93,  93,  93,  93,  97,
	 97,  97,  97,  97,  97,  97,  97, 101, 101, 101, 101, 101, 101, 101, 101, 105, 105, 105, 105, 105, 105, 105, 105, 109, 109, 109, 109, 109, 109, 109, 109, 113,
	113, 113, 113, 113, 113, 113, 113, 117, 117, 117, 117, 117, 117, 117, 117, 121, 121, 121, 121, 121, 121, 121, 121, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 134, 134, 134, 134, 134, 134, 134, 134, 138, 138, 138, 138, 138, 138, 138, 138, 142, 142, 142, 142, 142, 142, 142,
	142, 146, 146, 146, 146, 146, 146, 146, 146, 150, 150, 150, 150, 150, 150, 150, 150, 154, 154, 154, 154, 154, 154, 154, 154, 158, 158, 158, 158, 158, 158, 158,
	158, 162, 162, 162, 162, 162, 162, 162, 162, 166, 166, 166, 166, 166, 166, 166, 166, 170, 170, 170, 170, 170, 170, 170, 170, 174, 174, 174, 174, 174, 174, 174,
	174, 178, 178, 178, 178, 178, 178, 178, 178, 182, 182, 182, 182, 182, 182, 182, 182, 186, 186, 186, 186, 186, 186, 186, 186, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 195, 195, 195, 195, 195, 195, 195, 195, 195, 199, 199, 199, 199, 199, 199, 199, 199, 203, 203, 203, 203, 203, 203, 203, 203, 207, 207, 207, 207, 207,
	207, 207, 207, 211, 211, 211, 211, 211, 211, 211, 211, 215, 215, 215, 215, 215, 215, 215, 215, 219, 219, 219, 219, 219, 219, 219, 219, 223, 223, 223, 223, 223,
	223, 223, 223, 227, 227, 227, 227, 227, 227, 227, 227, 231, 231, 231, 231, 231, 231, 231, 231, 235, 235, 235, 235, 235, 235, 235, 235, 239, 239, 239, 239, 239,
	239, 239, 239, 243, 243, 243, 243, 243, 243, 243, 243, 247, 247, 247, 247, 247, 247, 247, 247, 251, 251, 251, 251, 251, 251, 251, 251, 255, 255, 255, 255, 255,
    //QUANT_80
      0,   0,   0,   0,   3,   3,   3,   3,   3,   3,   6,   6,   6,   6,   6,   6,   9,   9,   9,   9,   9,   9,   9,  13,  13,  13,  13,  13,  13,  13,  16,  16,
	 16,  16,  16,  16,  19,  19,  19,  19,  19,  19,  22,  22,  22,  22,  22,  22,  25,  25,  25,  25,  25,  25,  25,  29,  29,  29,  29,  29,  29,  29,  32,  32,
	 32,  32,  32,  32,  35,  35,  35,  35,  35,  35,  38,  38,  38,  38,  38,  38,  38,  42,  42,  42,  42,  42,  42,  42,  45,  45,  45,  45,  45,  45,  48,  48,
	 48,  48,  48,  48,  51,  51,  51,  51,  51,  51,  54,  54,  54,  54,  54,  54,  54,  58,  58,  58,  58,  58,  58,  58,  61,  61,  61,  61,  61,  61,  64,  64,
	 64,  64,  64,  64,  67,  67,  67,  67,  67,  67,  67,  71,  71,  71,  71,  71,  71,  71,  74,  74,  74,  74,  74,  74,  77,  77,  77,  77,  77,  77,  80,  80,
	 80,  80,  80,  80,  83,  83,  83,  83,  83,  83,  83,  87,  87,  87,  87,  87,  87,  87,  90,  90,  90,  90,  90,  90,  93,  93,  93,  93,  93,  93,  96,  96,
	 96,  96,  96,  96,  96, 100, 100, 100, 100, 100, 100, 100, 103, 103, 103, 103, 103, 103, 106, 106, 106, 106, 106, 106, 109, 109, 109, 109, 109, 109, 112, 112,
	112, 112, 112, 112, 112, 116, 116, 116, 116, 116, 116, 116, 119, 119, 119, 119, 119, 119, 122, 122, 122, 122, 122, 122, 125, 125, 125, 125, 125, 125, 125, 125,
	130, 130, 130, 130, 130, 130, 130, 130, 133, 133, 133, 133, 133, 133, 136, 136, 136, 136, 136, 136, 139, 139, 139, 139, 139, 139, 139, 143, 143, 143, 143, 143,
	143, 143, 146, 146, 146, 146, 146, 146, 149, 149, 149, 149, 149, 149, 152, 152, 152, 152, 152, 152, 155, 155, 155, 155, 155, 155, 155, 159, 159, 159, 159, 159,
	159, 159, 162, 162, 162, 162, 162, 162, 165, 165, 165, 165, 165, 165, 168, 168, 168, 168, 168, 168, 168, 172, 172, 172, 172, 172, 172, 172, 175, 175, 175, 175,
	175, 175, 178, 178, 178, 178, 178, 178, 181, 181, 181, 181, 181, 181, 184, 184, 184, 184, 184, 184, 184, 188, 188, 188, 188, 188, 188, 188, 191, 191, 191, 191,
	191, 191, 194, 194, 194, 194, 194, 194, 197, 197, 197, 197, 197, 197, 197, 201, 201, 201, 201, 201, 201, 201, 204, 204, 204, 204, 204, 204, 207, 207, 207, 207,
	207, 207, 210, 210, 210, 210, 210, 210, 213, 213, 213, 213, 213, 213, 213, 217, 217, 217, 217, 217, 217, 217, 220, 220, 220, 220, 220, 220, 223, 223, 223, 223,
	223, 223, 226, 226, 226, 226, 226, 226, 226, 230, 230, 230, 230, 230, 230, 230, 233, 233, 233, 233, 233, 233, 236, 236, 236, 236, 236, 236, 239, 239, 239, 239,
	239, 239, 242, 242, 242, 242, 242, 242, 242, 246, 246, 246, 246, 246, 246, 246, 249, 249, 249, 249, 249, 249, 252, 252, 252, 252, 252, 252, 255, 255, 255, 255,
    //QUANT_96
      0,   0,   0,   2,   2,   2,   2,   2,   5,   5,   5,   5,   5,   5,   8,   8,   8,   8,   8,  10,  10,  10,  10,  10,  13,  13,  13,  13,  13,  13,  16,  16,
	 16,  16,  16,  18,  18,  18,  18,  18,  21,  21,  21,  21,  21,  21,  24,  24,  24,  24,  24,  26,  26,  26,  26,  26,  29,  29,  29,  29,  29,  29,  32,  32,
	 32,  32,  32,  32,  35,  35,  35,  35,  35,  37,  37,  37,  37,  37,  40,  40,  40,  40,  40,  40,  43,  43,  43,  43,  43,  45,  45,  45,  45,  45,  48,  48,
	 48,  48,  48,  48,  51,  51,  51,  51,  51,  53,  53,  53,  53,  53,  56,  56,  56,  56,  56,  56,  59,  59,  59,  59,  59,  61,  61,  61,  61,  61,  64,  64,
	 64,  64,  64,  64,  67,  67,  67,  67,  67,  67,  70,  70,  70,  70,  70,  72,  72,  72,  72,  72,  75,  75,  75,  75,  75,  75,  78,  78,  78,  78,  78,  80,
	 80,  80,  80,  80,  83,  83,  83,  83,  83,  83,  86,  86,  86,  86,  86,  88,  88,  88,  88,  88,  91,  91,  91,  91,  91,  91,  94,  94,  94,  94,  94,  96,
	 96,  96,  96,  96,  99,  99,  99,  99,  99,  99, 102, 102, 102, 102, 102, 104, 104, 104, 104, 104, 107, 107, 107, 107, 107, 107, 110, 110, 110, 110, 110, 112,
	112, 112, 112, 112, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 120, 120, 120, 120, 120, 123, 123, 123, 123, 123, 123, 126, 126, 126, 126, 126, 126,
	129, 129, 129, 129, 129, 129, 132, 132, 132, 132, 132, 132, 135, 135, 135, 135, 135, 137, 137, 137, 137, 137, 140, 140, 140, 140, 140, 140, 143, 143, 143, 143,
	143, 145, 145, 145, 145, 145, 148, 148, 148, 148, 148, 148, 151, 151, 151, 151, 151, 153, 153, 153, 153, 153, 156, 156, 156, 156, 156, 156, 159, 159, 159, 159,
	159, 161, 161, 161, 161, 161, 164, 164, 164, 164, 164, 164, 167, 167, 167, 167, 167, 169, 169, 169, 169, 169, 172, 172, 172, 172, 172, 172, 175, 175, 175, 175,
	175, 177, 177, 177, 177, 177, 180, 180, 180, 180, 180, 180, 183, 183, 183, 183, 183, 185, 185, 185, 185, 185, 188, 188, 188, 188, 188, 188, 191, 191, 191, 191,
	191, 191, 194, 194, 194, 194, 194, 196, 196, 196, 196, 196, 199, 199, 199, 199, 199, 199, 202, 202, 202, 202, 202, 204, 204, 204, 204, 204, 207, 207, 207, 207,
	207, 207, 210, 210, 210, 210, 210, 212, 212, 212, 212, 212, 215, 215, 215, 215, 215, 215, 218, 218, 218, 218, 218, 220, 220, 220, 220, 220, 223, 223, 223, 223,
	223, 223, 226, 226, 226, 226, 226, 226, 229, 229, 229, 229, 229, 231, 231, 231, 231, 231, 234, 234, 234, 234, 234, 234, 237, 237, 237, 237, 237, 239, 239, 239,
	239, 239, 242, 242, 242, 242, 242, 242, 245, 245, 245, 245, 245, 247, 247, 247, 247, 247, 250, 250, 250, 250, 250, 250, 253, 253, 253, 253, 253, 255, 255, 255,
    //QUANT_128
      0,   0,   0,   2,   2,   2,   2,   4,   4,   4,   4,   6,   6,   6,   6,   8,   8,   8,   8,  10,  10,  10,  10,  12,  12,  12,  12,  14,  14,  14,  14,  16,
	 16,  16,  16,  18,  18,  18,  18,  20,  20,  20,  20,  22,  22,  22,  22,  24,  24,  24,  24,  26,  26,  26,  26,  28,  28,  28,  28,  30,  30,  30,  30,  32,
	 32,  32,  32,  34,  34,  34,  34,  36,  36,  36,  36,  38,  38,  38,  38,  40,  40,  40,  40,  42,  42,  42,  42,  44,  44,  44,  44,  46,  46,  46,  46,  48,
	 48,  48,  48,  50,  50,  50,  50,  52,  52,  52,  52,  54,  54,  54,  54,  56,  56,  56,  56,  58,  58,  58,  58,  60,  60,  60,  60,  62,  62,  62,  62,  64,
	 64,  64,  64,  66,  66,  66,  66,  68,  68,  68,  68,  70,  70,  70,  70,  72,  72,  72,  72,  74,  74,  74,  74,  76,  76,  76,  76,  78,  78,  78,  78,  80,
	 80,  80,  80,  82,  82,  82,  82,  84,  84,  84,  84,  86,  86,  86,  86,  88,  88,  88,  88,  90,  90,  90,  90,  92,  92,  92,  92,  94,  94,  94,  94,  96,
	 96,  96,  96,  98,  98,  98,  98, 100, 100, 100, 100, 102, 102, 102, 102, 104, 104, 104, 104, 106, 106, 106, 106, 108, 108, 108, 108, 110, 110, 110, 110, 112,
	112, 112, 112, 114, 114, 114, 114, 116, 116, 116, 116, 118, 118, 118, 118, 120, 120, 120, 120, 122, 122, 122, 122, 124, 124, 124, 124, 126, 126, 126, 126, 126,
	129, 129, 129, 129, 129, 131, 131, 131, 131, 133, 133, 133, 133, 135, 135, 135, 135, 137, 137, 137, 137, 139, 139, 139, 139, 141, 141, 141, 141, 143, 143, 143,
	143, 145, 145, 145, 145, 147, 147, 147, 147, 149, 149, 149, 149, 151, 151, 151, 151, 153, 153, 153, 153, 155, 155, 155, 155, 157, 157, 157, 157, 159, 159, 159,
	159, 161, 161, 161, 161, 163, 163, 163, 163, 165, 165, 165, 165, 167, 167, 167, 167, 169, 169, 169, 169, 171, 171, 171, 171, 173, 173, 173, 173, 175, 175, 175,
	175, 177, 177, 177, 177, 179, 179, 179, 179, 181, 181, 181, 181, 183, 183, 183, 183, 185, 185, 185, 185, 187, 187, 187, 187, 189, 189, 189, 189, 191, 191, 191,
	191, 193, 193, 193, 193, 195, 195, 195, 195, 197, 197, 197, 197, 199, 199, 199, 199, 201, 201, 201, 201, 203, 203, 203, 203, 205, 205, 205, 205, 207, 207, 207,
	207, 209, 209, 209, 209, 211, 211, 211, 211, 213, 213, 213, 213, 215, 215, 215, 215, 217, 217, 217, 217, 219, 219, 219, 219, 221, 221, 221, 221, 223, 223, 223,
	223, 225, 225, 225, 225, 227, 227, 227, 227, 229, 229, 229, 229, 231, 231, 231, 231, 233, 233, 233, 233, 235, 235, 235, 235, 237, 237, 237, 237, 239, 239, 239,
	239, 241, 241, 241, 241, 243, 243, 243, 243, 245, 245, 245, 245, 247, 247, 247, 247, 249, 249, 249, 249, 251, 251, 251, 251, 253, 253, 253, 253, 255, 255, 255,
    //QUANT_160
      0,   0,   1,   1,   1,   3,   3,   3,   4,   4,   4,   6,   6,   6,   6,   8,   8,   8,   9,   9,   9,  11,  11,  11,  12,  12,  12,  14,  14,  14,  14,  16,
	 16,  16,  17,  17,  17,  19,  19,  19,  20,  20,  20,  22,  22,  22,  22,  24,  24,  24,  25,  25,  25,  27,  27,  27,  28,  28,  28,  30,  30,  30,  30,  32,
	 32,  32,  33,  33,  33,  35,  35,  35,  36,  36,  36,  38,  38,  38,  38,  40,  40,  40,  41,  41,  41,  43,  43,  43,  44,  44,  44,  46,  46,  46,  46,  48,
	 48,  48,  49,  49,  49,  51,  51,  51,  52,  52,  52,  54,  54,  54,  54,  56,  56,  56,  57,  57,  57,  59,  59,  59,  60,  60,  60,  62,  62,  62,  62,  64,
	 64,  64,  65,  65,  65,  67,  67,  67,  68,  68,  68,  70,  70,  70,  70,  72,  72,  72,  73,  73,  73,  75,  75,  75,  76,  76,  76,  78,  78,  78,  78,  80,
	 80,  80,  81,  81,  81,  83,  83,  83,  84,  84,  84,  86,  86,  86,  86,  88,  88,  88,  89,  89,  89,  91,  91,  91,  92,  92,  92,  94,  94,  94,  94,  96,
	 96,  96,  97,  97,  97,  99,  99,  99, 100, 100, 100, 102, 102, 102, 102, 104, 104, 104, 105, 105, 105, 107, 107, 107, 108, 108, 108, 110, 110, 110, 110, 112,
	112, 112, 113, 113, 113, 115, 115, 115, 116, 116, 116, 118, 118, 118, 118, 120, 120, 120, 121, 121, 121, 123, 123, 123, 124, 124, 124, 126, 126, 126, 126, 126,
	129, 129, 129, 129, 129, 131, 131, 131, 132, 132, 132, 134, 134, 134, 135, 135, 135, 137, 137, 137, 137, 139, 139, 139, 140, 140, 140, 142, 142, 142, 143, 143,
	143, 145, 145, 145, 145, 147, 147, 147, 148, 148, 148, 150, 150, 150, 151, 151, 151, 153, 153, 153, 153, 155, 155, 155, 156, 156, 156, 158, 158, 158, 159, 159,
	159, 161, 161, 161, 161, 163, 163, 163, 164, 164, 164, 166, 166, 166, 167, 167, 167, 169, 169, 169, 169, 171, 171, 171, 172, 172, 172, 174, 174, 174, 175, 175,
	175, 177, 177, 177, 177, 179, 179, 179, 180, 180, 180, 182, 182, 182, 183, 183, 183, 185, 185, 185, 185, 187, 187, 187, 188, 188, 188, 190, 190, 190, 191, 191,
	191, 193, 193, 193, 193, 195, 195, 195, 196, 196, 196, 198, 198, 198, 199, 199, 199, 201, 201, 201, 201, 203, 203, 203, 204, 204, 204, 206, 206, 206, 207, 207,
	207, 209, 209, 209, 209, 211, 211, 211, 212, 212, 212, 214, 214, 214, 215, 215, 215, 217, 217, 217, 217, 219, 219, 219, 220, 220, 220, 222, 222, 222, 223, 223,
	223, 225, 225, 225, 225, 227, 227, 227, 228, 228, 228, 230, 230, 230, 231, 231, 231, 233, 233, 233, 233, 235, 235, 235, 236, 236, 236, 238, 238, 238, 239, 239,
	239, 241, 241, 241, 241, 243, 243, 243, 244, 244, 244, 246, 246, 246, 247, 247, 247, 249, 249, 249, 249, 251, 251, 251, 252, 252, 252, 254, 254, 254, 255, 255,
    //QUANT_192
      0,   0,   1,   1,   2,   2,   2,   4,   4,   4,   5,   5,   6,   6,   6,   8,   8,   8,   9,   9,  10,  10,  10,  12,  12,  12,  13,  13,  14,  14,  14,  16,
	 16,  16,  17,  17,  18,  18,  18,  20,  20,  20,  21,  21,  22,  22,  22,  24,  24,  24,  25,  25,  26,  26,  26,  28,  28,  28,  29,  29,  30,  30,  30,  32,
	 32,  32,  33,  33,  34,  34,  34,  36,  36,  36,  37,  37,  38,  38,  38,  40,  40,  40,  41,  41,  42,  42,  42,  44,  44,  44,  45,  45,  46,  46,  46,  48,
	 48,  48,  49,  49,  50,  50,  50,  52,  52,  52,  53,  53,  54,  54,  54,  56,  56,  56,  57,  57,  58,  58,  58,  60,  60,  60,  61,  61,  62,  62,  62,  64,
	 64,  64,  65,  65,  66,  66,  66,  68,  68,  68,  69,  69,  70,  70,  70,  72,  72,  72,  73,  73,  74,  74,  74,  76,  76,  76,  77,  77,  78,  78,  78,  80,
	 80,  80,  81,  81,  82,  82,  82,  84,  84,  84,  85,  85,  86,  86,  86,  88,  88,  88,  89,  89,  90,  90,  90,  92,  92,  92,  93,  93,  94,  94,  94,  96,
	 96,  96,  97,  97,  98,  98,  98, 100, 100, 100, 101, 101, 102, 102, 102, 104, 104, 104, 105, 105, 106, 106, 106, 108, 108, 108, 109, 109, 110, 110, 110, 112,
	112, 112, 113, 113, 114, 114, 114, 116, 116, 116, 117, 117, 118, 118, 118, 120, 120, 120, 121, 121, 122, 122, 122, 124, 124, 124, 125, 125, 126, 126, 126, 126,
	129, 129, 129, 129, 130, 130, 131, 131, 131, 133, 133, 133, 134, 134, 135, 135, 135, 137, 137, 137, 138, 138, 139, 139, 139, 141, 141, 141, 142, 142, 143, 143,
	143, 145, 145, 145, 146, 146, 147, 147, 147, 149, 149, 149, 150, 150, 151, 151, 151, 153, 153, 153, 154, 154, 155, 155, 155, 157, 157, 157, 158, 158, 159, 159,
	159, 161, 161, 161, 162, 162, 163, 163, 163, 165, 165, 165, 166, 166, 167, 167, 167, 169, 169, 169, 170, 170, 171, 171, 171, 173, 173, 173, 174, 174, 175, 175,
	175, 177, 177, 177, 178, 178, 179, 179, 179, 181, 181, 181, 182, 182, 183, 183, 183, 185, 185, 185, 186, 186, 187, 187, 187, 189, 189, 189, 190, 190, 191, 191,
	191, 193, 193, 193, 194, 194, 195, 195, 195, 197, 197, 197, 198, 198, 199, 199, 199, 201, 201, 201, 202, 202, 203, 203, 203, 205, 205, 205, 206, 206, 207, 207,
	207, 209, 209, 209, 210, 210, 211, 211, 211, 213, 213, 213, 214, 214, 215, 215, 215, 217, 217, 217, 218, 218, 219, 219, 219, 221, 221, 221, 222, 222, 223, 223,
	223, 225, 225, 225, 226, 226, 227, 227, 227, 229, 229, 229, 230, 230, 231, 231, 231, 233, 233, 233, 234, 234, 235, 235, 235, 237, 237, 237, 238, 238, 239, 239,
	239, 241, 241, 241, 242, 242, 243, 243, 243, 245, 245, 245, 246, 246, 247, 247, 247, 249, 249, 249, 250, 250, 251, 251, 251, 253, 253, 253, 254, 254, 255, 255,
	//QUANT_256
	  0,   0,   1,   1,   2,   2,   3,   3,   4,   4,   5,   5,   6,   6,   7,   7,   8,   8,   9,   9,  10,  10,  11,  11,  12,  12,  13,  13,  14,  14,  15,  15,
	 16,  16,  17,  17,  18,  18,  19,  19,  20,  20,  21,  21,  22,  22,  23,  23,  24,  24,  25,  25,  26,  26,  27,  27,  28,  28,  29,  29,  30,  30,  31,  31,
	 32,  32,  33,  33,  34,  34,  35,  35,  36,  36,  37,  37,  38,  38,  39,  39,  40,  40,  41,  41,  42,  42,  43,  43,  44,  44,  45,  45,  46,  46,  47,  47,
	 48,  48,  49,  49,  50,  50,  51,  51,  52,  52,  53,  53,  54,  54,  55,  55,  56,  56,  57,  57,  58,  58,  59,  59,  60,  60,  61,  61,  62,  62,  63,  63,
	 64,  64,  65,  65,  66,  66,  67,  67,  68,  68,  69,  69,  70,  70,  71,  71,  72,  72,  73,  73,  74,  74,  75,  75,  76,  76,  77,  77,  78,  78,  79,  79,
	 80,  80,  81,  81,  82,  82,  83,  83,  84,  84,  85,  85,  86,  86,  87,  87,  88,  88,  89,  89,  90,  90,  91,  91,  92,  92,  93,  93,  94,  94,  95,  95,
	 96,  96,  97,  97,  98,  98,  99,  99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111,
	112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127,
	128, 128, 129, 129, 130, 130, 131, 131, 132, 132, 133, 133, 134, 134, 135, 135, 136, 136, 137, 137, 138, 138, 139, 139, 140, 140, 141, 141, 142, 142, 143, 143,
	144, 144, 145, 145, 146, 146, 147, 147, 148, 148, 149, 149, 150, 150, 151, 151, 152, 152, 153, 153, 154, 154, 155, 155, 156, 156, 157, 157, 158, 158, 159, 159,
	160, 160, 161, 161, 162, 162, 163, 163, 164, 164, 165, 165, 166, 166, 167, 167, 168, 168, 169, 169, 170, 170, 171, 171, 172, 172, 173, 173, 174, 174, 175, 175,
	176, 176, 177, 177, 178, 178, 179, 179, 180, 180, 181, 181, 182, 182, 183, 183, 184, 184, 185, 185, 186, 186, 187, 187, 188, 188, 189, 189, 190, 190, 191, 191,
	192, 192, 193, 193, 194, 194, 195, 195, 196, 196, 197, 197, 198, 198, 199, 199, 200, 200, 201, 201, 202, 202, 203, 203, 204, 204, 205, 205, 206, 206, 207, 207,
	208, 208, 209, 209, 210, 210, 211, 211, 212, 212, 213, 213, 214, 214, 215, 215, 216, 216, 217, 217, 218, 218, 219, 219, 220, 220, 221, 221, 222, 222, 223, 223,
	224, 224, 225, 225, 226, 226, 227, 227, 228, 228, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 234, 234, 235, 235, 236, 236, 237, 237, 238, 238, 239, 239,
	240, 240, 241, 241, 242, 242, 243, 243, 244, 244, 245, 245, 246, 246, 247, 247, 248, 248, 249, 249, 250, 250, 251, 251, 252, 252, 253, 253, 254, 254, 255, 255
);


//------------------------------------------------------------------------------------------------

struct UniformVariables {
    xdim : u32,
    ydim : u32,

    texel_count : u32,

    decimation_mode_count : u32,
    block_mode_count : u32,

    valid_decimation_mode_count: u32,
	valid_block_mode_count: u32,

    quant_limit : u32,
    partition_count : u32,
    tune_candidate_limit : u32,

    _padding1: u32,
    _padding2: u32,

    channel_weights : vec4<f32>,
};

struct IdealEndpointsAndWeightsPartition {
    avg: vec4<f32>,
    dir: vec4<f32>,
    endpoint0: vec4<f32>,
    endpoint1: vec4<f32>,
};


struct FinalCandidate {
    block_mode_index: u32,
    block_mode_trial_index: u32,
    total_error: f32,
    quant_level: u32, // The original quant level
    quant_level_mod: u32,

    _padding1: u32,

	color_formats_matched: u32,
    final_quant_mode: u32, // The quant mode after checking the mod version

    formats: vec4<u32>,
    quantized_weights: array<u32, BLOCK_MAX_WEIGHTS>,
    candidate_partitions: array<IdealEndpointsAndWeightsPartition, 4>,

	final_formats: vec4<u32>, //Formats can change after quantization
    packed_color_values: array<u32, 32>, //8 integers per partition
};

struct PackedPartitionResult {
    values: array<u32, 8>,
	format: u32,
};

//------------------------------------------------------------------------------------------------

@group(0) @binding(0) var<uniform> uniforms: UniformVariables;
@group(0) @binding(1) var<storage, read> candidate_rgbs_vectors: array<vec4<f32>>;

@group(0) @binding(2) var<storage, read_write> final_candidates: array<FinalCandidate>;

//------------------------------------------------------------------------------------------------

fn get_rgba_encoding_error(
	uquant0: vec4<f32>,
	uquant1: vec4<f32>,
	quant0: vec4<i32>,
	quant1: vec4<i32>
) -> f32 {
	let error0 = uquant0 - vec4<f32>(quant0);
	let error1 = uquant1 - vec4<f32>(quant1);
	let error = error0 * error0 + error1 * error1;
	return error.r + error.g + error.b + error.a;
}

fn quant_color3_int(quant_level: u32, value: vec4<i32>) -> vec4<i32> {
	let index = value * 2 + 1;
	let quant_index = i32(quant_level - 4); //QUANT_6 = 4
	return vec4<i32>(
		COLOR_UNQUANT_TO_QUANT_TABLE[quant_index * 512 + index.r],
		COLOR_UNQUANT_TO_QUANT_TABLE[quant_index * 512 + index.g],
		COLOR_UNQUANT_TO_QUANT_TABLE[quant_index * 512 + index.b],
		0 // Alpha channel is not used in this context
	);
}

fn quant_color3_flt(quant_level: u32, value: vec4<i32>, valuef: vec4<f32>) -> vec4<i32> {
	var index = value * 2;

	//Compute the residual to determine if we should round down or up tiles
	let residual = valuef - vec4<f32>(value);
	let mask = residual >= vec4<f32>(-0.1f);
	index = select(index, index + 1, mask);

	let quant_index = i32(quant_level - 4); //QUANT_6 = 4
	return vec4<i32>(
		COLOR_UNQUANT_TO_QUANT_TABLE[quant_index * 512 + index.r],
		COLOR_UNQUANT_TO_QUANT_TABLE[quant_index * 512 + index.g],
		COLOR_UNQUANT_TO_QUANT_TABLE[quant_index * 512 + index.b],
		0 // Alpha channel is not used in this context
	);
}

fn quant_color_int(quant_level: u32, value: i32) -> u32 {
	let index = value * 2 + 1;
	let quant_index = i32(quant_level - 4); //QUANT_6 = 4
	return u32(COLOR_UNQUANT_TO_QUANT_TABLE[quant_index * 512 + index]);
}

fn quant_color_flt(quant_level: u32, value: i32, valuef: f32) -> u32 {
	var index = value * 2;

	// Compute the residual to determine if we should round down or up ties.
	let residual = valuef - f32(value);
	if(residual >= -0.1f) {
		index += 1;
	}

	let quant_index = i32(quant_level - 4); //QUANT_6 = 4
	return u32(COLOR_UNQUANT_TO_QUANT_TABLE[quant_index * 512 + index]);
}

fn bit_transfer_signed(input0: ptr<function, vec4<i32>>, input1: ptr<function, vec4<i32>>) {
    var input0_val = *input0;
    var input1_val = *input1;

    //preform shifts on unsigned interegers to guarantee logical shifts
    let input0_val_u = bitcast<vec4<u32>>(input0_val);
    let input1_val_u = bitcast<vec4<u32>>(input1_val);

    input1_val =  bitcast<vec4<i32>>((input1_val_u >> vec4<u32>(1)) | (input0_val_u & vec4<u32>(0x80)));
    input0_val =  bitcast<vec4<i32>>((input0_val_u >> vec4<u32>(1)) & vec4<u32>(0x3F));

    let mask = (input0_val & vec4<i32>(0x20)) != vec4<i32>(0);
    input0_val = select(input0_val, input0_val - 0x40, mask);

    *input0 = input0_val;
    *input1 = input1_val;
}

fn uncontract_color(input: vec4<i32>) -> vec4<i32> {
	let mask = vec4<bool>(true, true, false, false);
	let bc0 = (input + input.b) >> vec4<u32>(1);
	return select(input, bc0, mask);
}

fn rgba_delta_unpack(
	input0: vec4<i32>,
	input1: vec4<i32>,
	output0: ptr<function, vec4<i32>>,
	output1: ptr<function, vec4<i32>>
) {
	var i0 = input0;
	var i1 = input1;

	//apply bit transfer
	bit_transfer_signed(&i1, &i0);

	//apply blue contraction if needed
	let rgb_sum = i1.r + i1.g + i1.b;
	i1 = i1 + i0;
	if(rgb_sum < 0) {
		i0 = uncontract_color(i0);
		i1 = uncontract_color(i1);

		let temp = i0;
		i0 = i1;
		i1 = temp;
	}

	*output0 = clamp(i0, vec4<i32>(0), vec4<i32>(255));
	*output1 = clamp(i1, vec4<i32>(0), vec4<i32>(255));
}

fn rgba_unpack(
	input0: vec4<i32>,
	input1: vec4<i32>,
	output0: ptr<function, vec4<i32>>,
	output1: ptr<function, vec4<i32>>
) {
	var i0 = input0;
	var i1 = input1;

	//Apply blue contraction if needed
	if((i0.r + i0.g + i0.b) > (i1.r + i1.g + i1.b)) {
		i0 = uncontract_color(i0);
		i1 = uncontract_color(i1);

		let temp = i0;
		i0 = i1;
		i1 = temp;
	}

	*output0 = i0;
	*output1 = i1;
}

fn try_quantize_rgb_delta_blue_contract(
    color0: vec4<f32>,
    color1: vec4<f32>,
    color0_out: ptr<function, vec4<i32>>,
    color1_out: ptr<function, vec4<i32>>,
    quant_level: u32
) -> bool {

    //Swap endpoints at the start
    var c0 = color1;
    var c1 = color0;

    // Apply inverse blue contraction
    c0 = c0 + c0 - c0.bbba;
    c1 = c1 + c1 - c1.bbba;

    //check for out of range
    let c0_out = (c0 < vec4<f32>(0.0f)) | (c0 > vec4<f32>(255.0f));
    let c1_out = (c1 < vec4<f32>(0.0f)) | (c1 > vec4<f32>(255.0f));
    if(any(c0_out | c1_out)) {
     return false; // Out of range, cannot quantize
	}

    //Transform color0 to unorm9
    var c0a = vec4<i32>(round(c0));
    c0.a = 0.0; // copied from C++ code, unclear why we do this, since it is not used later
    c0a = c0a << vec4<u32>(1);

    // Mask off the top bit
    var c0b = c0a & vec4<i32>(0xFF);

    //quantize and then unquantize
    let c0be = quant_color3_int(quant_level, c0b);
    c0b = c0be | (c0a & vec4<i32>(0x100));

    // Get second value
    var c1d = vec4<i32>(round(c1));
    c1d = c1d << vec4<u32>(1);

    //take differences
    c1d = c1d - c0b;
    c1d.a = 0;

    //Check if diffrence is to large to encode
    if(any((c1d > vec4<i32>(63)) | (c1d < vec4<i32>(-64)))) {
        return false; // Difference too large to encode
    }

    //Insert top bit of the base into offset
    c1d = c1d & vec4<i32>(0x7F);
    c1d = c1d | ((c0b & vec4<i32>(0x100)) >> vec4<u32>(1));

    //Quantize and unquantize
    //If either top two bits flip, we cannot encode, since top bit of base ot sign of offset is corrupted
    let c1de = quant_color3_int(quant_level, c1d);

    var color_flips = (c1d ^ c1de) & vec4<i32>(0xC0);
    color_flips.a = 0; // Ignore alpha channel for this check
    if (any(color_flips != vec4<i32>(0))) {
		return false; // Color flip detected, cannot encode
	}

    // If sum of offsets does not trigger blue contraction, encoding fails
    var ep0 = c0be;
    var ep1 = c1de;
    bit_transfer_signed(&ep1, &ep0);
    if((ep1.r + ep1.g + ep1.b) >= 0) {
        return false;
    }

    // check if offsets produce legitimate sum
    ep0 = ep0 + ep1;
    if (any((ep0 < vec4<i32>(0)) | (ep0 > vec4<i32>(0xFF)))) {
		return false;
	}

    // Store the quantized endpoints
	*color0_out = c0be;
	*color1_out = c1de;

	return true; // Successfully quantized
}

fn try_quantize_rgb_delta(
    color0: vec4<f32>,
    color1: vec4<f32>,
    color0_out: ptr<function, vec4<i32>>,
    color1_out: ptr<function, vec4<i32>>,
    quant_level: u32
) -> bool {
	
	// Transform color0 to unorm9
	var c0a = vec4<i32>(round(color0));
	c0a = c0a << vec4<u32>(1);

	//Mask off the top bit
	var c0b = c0a & vec4<i32>(0xFF);

	// Quantize and then unquantize
	let c0be = quant_color3_int(quant_level, c0b);
	c0b = c0be | (c0a & vec4<i32>(0x100));

	// Get second value
	var c1d = vec4<i32>(round(color1));
	c1d = c1d << vec4<u32>(1);

	// Take differences
	c1d = c1d - c0b;
	c1d.a = 0;

	// Check if difference is too large to encode
	if (any((c1d > vec4<i32>(63)) | (c1d < vec4<i32>(-64)))) {
		return false; // Difference too large to encode
	}

	// Insert top bit of the base into offset
	c1d = c1d & vec4<i32>(0x7F);
	c1d = c1d | ((c0b & vec4<i32>(0x100)) >> vec4<u32>(1));

	// Quantize and unquantize
	let c1de = quant_color3_int(quant_level, c1d);

	var color_flips = (c1d ^ c1de) & vec4<i32>(0xC0);
    color_flips.a = 0; // Ignore alpha channel for this check
    if (any(color_flips != vec4<i32>(0))) {
		return false; // Color flip detected, cannot encode
	}

	// If the sum of offsets triggers blue contraction, encoding fails
	var ep0 = c0be;
	var ep1 = c1de;
	bit_transfer_signed(&ep1, &ep0);
	if ((ep1.r + ep1.g + ep1.b) < 0) {
		return false;
	}

	// Check if offsets produce legitimate sum
	ep0 = ep0 + ep1;
	if (any((ep0 < vec4<i32>(0)) | (ep0 > vec4<i32>(0xFF)))) {
		return false;
	}

	// Store the quantized endpoints
	*color0_out = c0be;
	*color1_out = c1de;

	return true; // Successfully quantized
}

fn try_quantize_rgb_blue_contract(
    color0: vec4<f32>,
    color1: vec4<f32>,
    color0_out: ptr<function, vec4<i32>>,
    color1_out: ptr<function, vec4<i32>>,
    quant_level: u32
) -> bool {

	var c0 = color0;
	var c1 = color1;
	
	// Apply inverse blue contraction
	c0 = c0 + c0 - c0.bbba;
	c1 = c1 + c1 - c1.bbba;

	// Check for out of range
	let c0_out = (c0 < vec4<f32>(0.0f)) | (c0 > vec4<f32>(255.0f));
	let c1_out = (c1 < vec4<f32>(0.0f)) | (c1 > vec4<f32>(255.0f));
	if (any(c0_out | c1_out)) {
		return false; // Out of range, cannot quantize
	}

	// Quantize the inverse bulue contracted colors
	let c0i = quant_color3_flt(quant_level, vec4<i32>(round(c0)), c0);
	let c1i = quant_color3_flt(quant_level, vec4<i32>(round(c1)), c1);

	//If color 1 is not greater than color 0, blue contraction can't be used
	if((c1i.r + c1i.g + c1i.b) <= (c0i.r + c0i.g + c0i.b)) {
		return false;
	}

	//swap output endpoints
	*color0_out = c1i;
	*color1_out = c0i;

	return true; // Successfully quantized
}

//This encoding cannot fail but must produce a sencible result
//color 0 cannot be larger than color 1. If it is, color0 is reduced and color1 increased
//until the condition is met
fn quantize_rgb(
    color0: vec4<f32>,
    color1: vec4<f32>,
    color0_out: ptr<function, vec4<i32>>,
    color1_out: ptr<function, vec4<i32>>,
    quant_level: u32
) {
	var c0 = color0;
	var c1 = color1;
	var c0i: vec4<i32>;
	var c1i: vec4<i32>;

	let nudge = vec4<f32>(0.2f);

	loop {
		let c0q = max(vec4<i32>(round(c0)), vec4<i32>(0));
		c0i = quant_color3_flt(quant_level, c0q, c0);
		c0 = c0 - nudge;

		let c1q = min(vec4<i32>(round(c1)), vec4<i32>(255));
		c1i = quant_color3_flt(quant_level, c1q, c1);
		c1 = c1 + nudge;

		if ((c0i.r + c0i.g + c0i.b) <= (c1i.r + c1i.g + c1i.b)) {
            break;
        }
	}

	*color0_out = c0i;
	*color1_out = c1i;

}

fn try_quantize_alpha_delta(
    color0: vec4<f32>,
    color1: vec4<f32>,
    color0_out: ptr<function, vec4<i32>>,
    color1_out: ptr<function, vec4<i32>>,
    quant_level: u32
) -> bool {

	let a0 = color0.a;
	let a1 = color1.a;

	var a0a = i32(round(a0));
	a0a = a0a << 1;
	var a0b = a0a & 0xFF;
	let a0be = i32(quant_color_int(quant_level, a0b));
	a0b = a0be | (a0a & 0x100);

	var a1d = i32(round(a1));
	a1d = a1d << 1;
	a1d = a1d - a0b;

	if (a1d > 63 || a1d < -64) {
		return false;
	}

	a1d = a1d & 0x7F;
	a1d = a1d | ((a0b & 0x100) >> 1);

	let a1de = i32(quant_color_int(quant_level, a1d));
	var a1du = a1de;
	if (((a1d ^ a1du) & 0xC0) != 0) {
		return false; // Color flip detected, cannot encode
	}

	a1du = a1du & 0x7F;
	if((a1du & 0x40) != 0) {
		a1du = a1du - 0x80;
	}

	a1du = a1du + a0b;
	if (a1du < 0 || a1du > 0x1FF) {
		return false;
	}

	// Store the quantized alpha
	(*color0_out).a = a0be;
	(*color1_out).a = a1de;

	return true; // Successfully quantized
}

fn try_quantize_rgba_delta_blue_contract(
    color0: vec4<f32>,
    color1: vec4<f32>,
    color0_out: ptr<function, vec4<i32>>,
    color1_out: ptr<function, vec4<i32>>,
    quant_level: u32
) -> bool {
	//swap color0 and color1 ordering for alpha to match RGB blue-contract
	return try_quantize_rgb_delta_blue_contract(color0, color1, color0_out, color1_out, quant_level) &&
		   try_quantize_alpha_delta(color1, color0, color0_out, color1_out, quant_level);
}

fn try_quantize_rgba_delta(
    color0: vec4<f32>,
    color1: vec4<f32>,
    color0_out: ptr<function, vec4<i32>>,
    color1_out: ptr<function, vec4<i32>>,
    quant_level: u32
) -> bool {
	return try_quantize_rgb_delta(color0, color1, color0_out, color1_out, quant_level) &&
		   try_quantize_alpha_delta(color0, color1, color0_out, color1_out, quant_level);
}

fn try_quantize_rgba_blue_contract(
    color0: vec4<f32>,
    color1: vec4<f32>,
    color0_out: ptr<function, vec4<i32>>,
    color1_out: ptr<function, vec4<i32>>,
    quant_level: u32
) -> bool {
	if(try_quantize_rgb_blue_contract(color0, color1, color0_out, color1_out, quant_level)) {
		let a0 = color0.a;
		let a1 = color1.a;

		(*color0_out).a = i32(quant_color_flt(quant_level, i32(round(a1)), a1));
		(*color1_out).a = i32(quant_color_flt(quant_level, i32(round(a0)), a0));

		return true; // Successfully quantized
	}

	return false;
}

fn quantize_rgba(
    color0: vec4<f32>,
    color1: vec4<f32>,
    color0_out: ptr<function, vec4<i32>>,
    color1_out: ptr<function, vec4<i32>>,
    quant_level: u32
) {
	quantize_rgb(color0, color1, color0_out, color1_out, quant_level);

	let a0 = color0.a;
	let a1 = color1.a;

	(*color0_out).a = i32(quant_color_flt(quant_level, i32(round(a0)), a0));
	(*color1_out).a = i32(quant_color_flt(quant_level, i32(round(a1)), a1));
}

fn quantize_rgbs(
	color: vec4<f32>,
	output: ptr<function, array<u32, 8>>,
	quant_level: u32
) {
	let scale = 1.0f / 257.0f;

	let r = clamp((color.r * scale), 0.0, 255.0);
	let g = clamp((color.g * scale), 0.0, 255.0);
	let b = clamp((color.b * scale), 0.0, 255.0);

	let ri = quant_color_flt(quant_level, i32(round(r)), r);
	let gi = quant_color_flt(quant_level, i32(round(g)), g);
	let bi = quant_color_flt(quant_level, i32(round(b)), b);

	let oldcolorsum = (color.r + color.g + color.b) * scale;
	let newcolorsum = f32(ri + gi + bi);

	let scalea = clamp((color.a * (oldcolorsum + 1e-10) / (newcolorsum + 1e-10)), 0.0, 1.0);
	var scale_idx = i32(round(scalea * 256.0));
	scale_idx = clamp(scale_idx, 0, 255);

	(*output)[0] = ri;
	(*output)[1] = gi;
	(*output)[2] = bi;
	(*output)[3] = quant_color_int(quant_level, scale_idx);
}

fn quantize_rgbs_alpha(
    color0: vec4<f32>,
    color1: vec4<f32>,
	color: vec4<f32>,
    output: ptr<function, array<u32, 8>>,
    quant_level: u32
) {
	let a0 = color0.a;
	let a1 = color1.a;

	(*output)[4] = quant_color_flt(quant_level, i32(round(a0)), a0);
	(*output)[5] = quant_color_flt(quant_level, i32(round(a1)), a1);

	quantize_rgbs(color, output, quant_level);
}

fn quantize_luminance(
	color0: vec4<f32>,
    color1: vec4<f32>,
	output: ptr<function, array<u32, 8>>,
    quant_level: u32
) {
	var lum0 = (color0.r + color0.g + color0.b) / 3.0;
	var lum1 = (color1.r + color1.g + color1.b) / 3.0;

	if(lum0 > lum1) {
		let avg = (lum0 + lum1) * 0.5;
		lum0 = avg;
		lum1 = avg;
	}

	(*output)[0] = quant_color_flt(quant_level, i32(round(lum0)), lum0);
	(*output)[1] = quant_color_flt(quant_level, i32(round(lum1)), lum1);
}

fn try_quantize_luminance_alpha_delta(
	color0: vec4<f32>,
	color1: vec4<f32>,
	output: ptr<function, array<u32, 8>>,
	quant_level: u32
) -> bool {
	
	let l0 = (color0.r + color0.g + color0.b) / 3.0;
	let l1 = (color1.r + color1.g + color1.b) / 3.0;

	let a0 = color0.a;
	let a1 = color1.a;

	var l0a = i32(round(l0));
	var a0a = i32(round(a0));
	l0a = l0a << 1;
	a0a = a0a << 1;

	var l0b = l0a & 0xFF;
	var a0b = a0a & 0xFF;
	let l0be = quant_color_int(quant_level, l0b);
	let a0be = quant_color_int(quant_level, a0b);
	l0b = i32(l0be) | (l0a & 0x100);
	a0b = i32(a0be) | (a0a & 0x100);

	var l1d = i32(round(l1));
	var a1d = i32(round(a1));
	l1d = l1d << 1;
	a1d = a1d << 1;
	l1d = l1d - l0b;
	a1d = a1d - a0b;

	if (l1d > 63 || l1d < -64 || a1d > 63 || a1d < -64) {
		return false; // Difference too large to encode
	}

	l1d = l1d & 0x7F;
	a1d = a1d & 0x7F;
	l1d = l1d | ((l0b & 0x100) >> 1);
	a1d = a1d | ((a0b & 0x100) >> 1);

	let l1de = quant_color_int(quant_level, l1d);
	let a1de = quant_color_int(quant_level, a1d);
	var l1du = i32(l1de);
	var a1du = i32(a1de);

	if(((l1d ^ l1du) & 0xC0) != 0) {
		return false;
	}

	if(((a1d ^ a1du) & 0xC0) != 0) {
		return false;
	}

	l1du = l1du & 0x7F;
	a1du = a1du & 0x7F;

	if((l1du & 0x40) != 0) {
		l1du = l1du - 0x80;
	}

	if((a1du & 0x40) != 0) {
		a1du = a1du - 0x80;
	}

	l1du = l1du + l0b;
	a1du = a1du + a0b;

	if (l1du < 0 || l1du > 0x1FF || a1du < 0 || a1du > 0x1FF) {
		return false;
	}

	// Store the quantized luminance and alpha
	(*output)[0] = l0be;
	(*output)[1] = l1de;
	(*output)[2] = a0be;
	(*output)[3] = a1de;

	return true; // Successfully quantized
}

fn quantize_luminance_alpha(
	color0: vec4<f32>,
	color1: vec4<f32>,
	output: ptr<function, array<u32, 8>>,
	quant_level: u32
) {
	let lum0 = (color0.r + color0.g + color0.b) / 3.0;
	let lum1 = (color1.r + color1.g + color1.b) / 3.0;

	let a0 = color0.a;
	let a1 = color1.a;

	(*output)[0] = quant_color_flt(quant_level, i32(round(lum0)), lum0);
	(*output)[1] = quant_color_flt(quant_level, i32(round(lum1)), lum1);
	(*output)[2] = quant_color_flt(quant_level, i32(round(a0)), a0);
	(*output)[3] = quant_color_flt(quant_level, i32(round(a1)), a1);
}


//------------------------------------------------------------------------------------------------

// This is the main helper function, a direct translation of the C++ `pack_color_endpoints`
fn pack_color_endpoints_helper(
    color0: vec4<f32>,
    color1: vec4<f32>,
    rgbs_color: vec4<f32>,
    format_spec: u32,
    quant_level: u32
) -> PackedPartitionResult {

    // Clamp and scale to the 0-255 range for quantization
    let color0_ldr = clamp(color0, vec4<f32>(0.0), vec4<f32>(65535.0)) / 257.0;
    let color1_ldr = clamp(color1, vec4<f32>(0.0), vec4<f32>(65535.0)) / 257.0;

    var best_error = ERROR_CALC_DEFAULT;
	var packed_output = array<u32, 8>(0,0,0,0,0,0,0,0);
	var best_format = FMT_LUMINANCE; // Default format

	var color0_out = vec4<i32>(0);
	var color1_out = vec4<i32>(0);
	var color0_out2 = vec4<i32>(0);
	var color1_out2 = vec4<i32>(0);

    switch (format_spec) {
        case FMT_RGB: {
			if(quant_level <= 18) { //QUANT_160 = 18

				if(try_quantize_rgb_delta_blue_contract(color0_ldr, color1_ldr, &color0_out, &color1_out, quant_level)) {
					var color0_unpacked = vec4<i32>(0);
					var color1_unpacked = vec4<i32>(0);
					rgba_delta_unpack(color0_out, color1_out, &color0_unpacked, &color1_unpacked);

					best_format = FMT_RGB_DELTA;
					best_error = get_rgba_encoding_error(color0_ldr, color1_ldr, color0_unpacked, color1_unpacked);
				}

				if(try_quantize_rgb_delta(color0_ldr, color1_ldr, &color0_out2, &color1_out2, quant_level)) {
					var color0_unpacked = vec4<i32>(0);
					var color1_unpacked = vec4<i32>(0);
					rgba_delta_unpack(color0_out2, color1_out2, &color0_unpacked, &color1_unpacked);

					let error = get_rgba_encoding_error(color0_ldr, color1_ldr, color0_unpacked, color1_unpacked);
					if (error < best_error) {
						best_error = error;
						best_format = FMT_RGB_DELTA;
						color0_out = color0_out2;
						color1_out = color1_out2;
					}
				}
			}

			if(quant_level < 20) { //QUANT_256 = 20
				if(try_quantize_rgb_blue_contract(color0_ldr, color1_ldr, &color0_out2, &color1_out2, quant_level)) {
					var color0_unpacked = vec4<i32>(0);
					var color1_unpacked = vec4<i32>(0);
					rgba_unpack(color0_out2, color1_out2, &color0_unpacked, &color1_unpacked);

					let error = get_rgba_encoding_error(color0_ldr, color1_ldr, color0_unpacked, color1_unpacked);
					if (error < best_error) {
						best_error = error;
						best_format = FMT_RGB;
						color0_out = color0_out2;
						color1_out = color1_out2;
					}
				}
			}

			{
				quantize_rgb(color0_ldr, color1_ldr, &color0_out2, &color1_out2, quant_level);

				var color0_unpacked = vec4<i32>(0);
				var color1_unpacked = vec4<i32>(0);
				rgba_unpack(color0_out2, color1_out2, &color0_unpacked, &color1_unpacked);

				let error = get_rgba_encoding_error(color0_ldr, color1_ldr, color0_unpacked, color1_unpacked);
				if (error < best_error) {
					best_error = error;
					best_format = FMT_RGB;
					color0_out = color0_out2;
					color1_out = color1_out2;
				}
			}

			packed_output[0] = u32(color0_out.r);
			packed_output[1] = u32(color1_out.r);
			packed_output[2] = u32(color0_out.g);
			packed_output[3] = u32(color1_out.g);
			packed_output[4] = u32(color0_out.b);
			packed_output[5] = u32(color1_out.b);

			break;
        }
        case FMT_RGBA: {
            if(quant_level <= 18) { //QUANT_160 = 18
				if(try_quantize_rgba_delta_blue_contract(color0_ldr, color1_ldr, &color0_out, &color1_out, quant_level)) {
					var color0_unpacked = vec4<i32>(0);
					var color1_unpacked = vec4<i32>(0);
					rgba_delta_unpack(color0_out, color1_out, &color0_unpacked, &color1_unpacked);

					best_format = FMT_RGBA_DELTA;
					best_error = get_rgba_encoding_error(color0_ldr, color1_ldr, color0_unpacked, color1_unpacked);
				}

				if(try_quantize_rgba_delta(color0_ldr, color1_ldr, &color0_out2, &color1_out2, quant_level)) {
					var color0_unpacked = vec4<i32>(0);
					var color1_unpacked = vec4<i32>(0);
					rgba_delta_unpack(color0_out2, color1_out2, &color0_unpacked, &color1_unpacked);

					let error = get_rgba_encoding_error(color0_ldr, color1_ldr, color0_unpacked, color1_unpacked);
					if (error < best_error) {
						best_error = error;
						best_format = FMT_RGBA_DELTA;
						color0_out = color0_out2;
						color1_out = color1_out2;
					}
				}
			}

			if(quant_level < 20) { //QUANT_256 = 20
				if(try_quantize_rgba_blue_contract(color0_ldr, color1_ldr, &color0_out2, &color1_out2, quant_level)) {
					var color0_unpacked = vec4<i32>(0);
					var color1_unpacked = vec4<i32>(0);
					rgba_unpack(color0_out2, color1_out2, &color0_unpacked, &color1_unpacked);

					let error = get_rgba_encoding_error(color0_ldr, color1_ldr, color0_unpacked, color1_unpacked);
					if (error < best_error) {
						best_error = error;
						best_format = FMT_RGBA;
						color0_out = color0_out2;
						color1_out = color1_out2;
					}
				}
			}

			{
				quantize_rgba(color0_ldr, color1_ldr, &color0_out2, &color1_out2, quant_level);

				var color0_unpacked = vec4<i32>(0);
				var color1_unpacked = vec4<i32>(0);
				rgba_unpack(color0_out2, color1_out2, &color0_unpacked, &color1_unpacked);

				let error = get_rgba_encoding_error(color0_ldr, color1_ldr, color0_unpacked, color1_unpacked);
				if (error < best_error) {
					best_error = error;
					best_format = FMT_RGBA;
					color0_out = color0_out2;
					color1_out = color1_out2;
				}
			}

			packed_output[0] = u32(color0_out.r);
			packed_output[1] = u32(color1_out.r);
			packed_output[2] = u32(color0_out.g);
			packed_output[3] = u32(color1_out.g);
			packed_output[4] = u32(color0_out.b);
			packed_output[5] = u32(color1_out.b);
			packed_output[6] = u32(color0_out.a);
			packed_output[7] = u32(color1_out.a);

			break;
        }
        case FMT_RGB_SCALE: {
			quantize_rgbs(rgbs_color, &packed_output, quant_level);
			best_format = FMT_RGB_SCALE;
			break;
		}
		case FMT_RGB_SCALE_ALPHA: {
			quantize_rgbs_alpha(color0_ldr, color1_ldr, rgbs_color, &packed_output, quant_level);
			best_format = FMT_RGB_SCALE_ALPHA;
			break;
		}
		case FMT_LUMINANCE: {
			quantize_luminance(color0_ldr, color1_ldr, &packed_output, quant_level);
			best_format = FMT_LUMINANCE;
			break;
		}
		case FMT_LUMINANCE_ALPHA: {
			if(quant_level <= 18) { //QUANT_160 = 18
				if(try_quantize_luminance_alpha_delta(color0_ldr, color1_ldr, &packed_output, quant_level)) {
					best_format = FMT_LUMINANCE_ALPHA_DELTA;
					break;
				}
			}
			quantize_luminance_alpha(color0_ldr, color1_ldr, &packed_output, quant_level);
			best_format = FMT_LUMINANCE_ALPHA;
			break;
		}
        default: {
            // Default or unsupported format
            best_format = FMT_LUMINANCE;
            quantize_luminance(color0_ldr, color1_ldr, &packed_output, quant_level);
        }
    }

	var result: PackedPartitionResult;
	result.values = packed_output;
    result.format = best_format;

    return result;
}

//------------------------------------------------------------------------------------------------

@compute @workgroup_size(1)
fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {

    let block_idx = global_id.x;
    let candidate_idx = block_idx * uniforms.tune_candidate_limit + global_id.y;

    let candidate = final_candidates[candidate_idx];
    let partition_count = uniforms.partition_count;

    // 1. First Pass Pack (Using normal quant_level)
    var all_same = (candidate.quant_level != candidate.quant_level_mod);
	var color_formats_normal: vec4<u32>;
	var color_values_normal: array<u32, 32>;

    for (var p = 0u; p < partition_count; p = p + 1u) {
        let rgbs_vector = candidate_rgbs_vectors[candidate_idx * BLOCK_MAX_PARTITIONS + p];
        
        let result = pack_color_endpoints_helper(
            candidate.candidate_partitions[p].endpoint0,
            candidate.candidate_partitions[p].endpoint1,
            rgbs_vector,
            candidate.formats[p],
            candidate.quant_level
        );

        color_formats_normal[p] = result.format;

		for (var i = 0u; i < 8u; i = i + 1u) {
			color_values_normal[p * 8 + i] = result.values[i];
		}
        
        if (p > 0u) {
            all_same = all_same && (result.format == color_formats_normal[0]);
        }
    }

    // 2. Second Pass Pack (Using modified quant_level, if applicable)
    var formats_matched = false;
    if (partition_count >= 2u && all_same) {
        var color_formats_mod: vec4<u32>;
        var all_same_mod = true;
		var color_values_mod: array<u32, 32>;

        for (var p = 0u; p < partition_count; p = p + 1u) {
            let rgbs_vector = candidate_rgbs_vectors[candidate_idx * BLOCK_MAX_PARTITIONS + p];
            
            let result = pack_color_endpoints_helper(
                candidate.candidate_partitions[p].endpoint0,
                candidate.candidate_partitions[p].endpoint1,
                rgbs_vector,
                candidate.formats[p],
                candidate.quant_level_mod
            );

            color_formats_mod[p] = result.format;
            
			for (var i = 0u; i < 8u; i = i + 1u) {
				color_values_mod[p * 8 + i] = result.values[i];
			}
            
            if (p > 0u && (result.format != color_formats_mod[0])) {
                all_same_mod = false;
                break;
            }
        }

        if (all_same_mod) {
            formats_matched = true;
            color_formats_normal = color_formats_mod;
            color_values_normal = color_values_mod;
        }
    }

    // 3. Final Store
	let out_ptr = &final_candidates[candidate_idx];
	(*out_ptr).color_formats_matched = select(0u, 1u, formats_matched);
	(*out_ptr).final_quant_mode = select(candidate.quant_level, candidate.quant_level_mod, formats_matched);
	(*out_ptr).final_formats = color_formats_normal;
	(*out_ptr).packed_color_values = color_values_normal;

}